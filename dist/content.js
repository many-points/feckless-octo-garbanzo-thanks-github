// Generated by CoffeeScript 1.10.0
(function() {
  var vkdl;

  Array.prototype.first = function() {
    return this[0];
  };

  NodeList.prototype.first = function() {
    return this[0];
  };

  NodeList.prototype.forEach = Array.prototype.forEach;

  vkdl = {
    get_url: function(parent) {
      return parent.querySelector("input").value.split('?').first(null);
    },
    get_song_name: function(parent) {
      return parent.querySelector(".title_wrap").innerText.trim(null).replace('/', '-').concat('.mp3');
    },
    download_file_event: function() {
      var that;
      that = this;
      return function(event) {
        var name, options, url;
        event.preventDefault();
        url = that.get_url(this.parentElement);
        name = that.get_song_name(this.parentElement);
        console.log(name + " " + url);
        return options = {
          url: url,
          filename: name,
          conflictAction: 'uniquify'
        };
      };
    },
    add_event: function(node) {
      var button;
      button = node.querySelector('.area.clear_fix');
      button.addEventListener('contextmenu', this.download_file_event(null));
    },
    add_event_to_existing_nodes: function() {
      var nodes, that;
      that = this;
      nodes = document.querySelectorAll('.audio');
      nodes.forEach(function(node) {
        return that.add_event(node);
      });
    },
    observer: new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {});
    }),
    start_observer: function() {
      var config, initial;
      config = {
        childList: true,
        subtree: true
      };
      initial = null;
      if (initial != null) {
        return this.observer.observe(initial, config);
      }
    }
  };

  vkdl.add_event_to_existing_nodes();

}).call(this);
